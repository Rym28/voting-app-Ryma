name: Voting App â€“ CI/CD to AWS EKS (ARM64 + Cache)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  K8S_NAMESPACE: ${{ secrets.K8S_NAMESPACE }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    name: Build and Push ARM64 Docker Images to ECR
    runs-on: ubuntu-latest
    outputs:
      ecr_registry: ${{ steps.export.outputs.ecr_registry }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Export ECR registry
        id: export
        run: |
          echo "ecr_registry=${{ steps.login.outputs.registry }}" >> $GITHUB_OUTPUT
          echo "âœ… Registry: ${{ steps.login.outputs.registry }}"

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Restore Docker build cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Ensure ECR repositories exist
        run: |
          SERVICES=("vote" "vote-ui" "result" "result-ui" "worker")
          for SERVICE in "${SERVICES[@]}"; do
            echo "Ensuring repo $SERVICE"
            aws ecr describe-repositories --repository-names $SERVICE >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name $SERVICE --region $AWS_REGION
          done

      - name: Build and Push ARM64 Docker Images (cached)
        env:
          ECR_REGISTRY: ${{ steps.login.outputs.registry }}
        run: |
          SERVICES=("vote" "vote-ui" "result" "result-ui" "worker")
          for SERVICE in "${SERVICES[@]}"; do
            IMAGE_URI="$ECR_REGISTRY/$SERVICE:${IMAGE_TAG}"
            echo "ðŸš€ Building $SERVICE â†’ $IMAGE_URI"
            if [ "$SERVICE" = "worker" ]; then
              docker buildx build \
                --platform linux/arm64 \
                --cache-from type=local,src=/tmp/.buildx-cache \
                --cache-to type=local,dest=/tmp/.buildx-cache,mode=max \
                -t "$IMAGE_URI" \
                -f "./$SERVICE/src/Dockerfile" "./$SERVICE/src" \
                --push
            else
              docker buildx build \
                --platform linux/arm64 \
                --cache-from type=local,src=/tmp/.buildx-cache \
                --cache-to type=local,dest=/tmp/.buildx-cache,mode=max \
                -t "$IMAGE_URI" "./$SERVICE" \
                --push
            fi
          done

  deploy-to-eks:
    name: Deploy Voting App to EKS
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Connect to EKS cluster
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Deploy Helm Chart
        env:
          ECR_REGISTRY: ${{ needs.build-and-push.outputs.ecr_registry }}
        run: |
          echo "ðŸ§© Using registry: $ECR_REGISTRY"
          helm upgrade --install voting ./voting-app \
            --namespace ${{ secrets.K8S_NAMESPACE }} \
            --create-namespace \
            --set vote.image.repository=$ECR_REGISTRY/vote \
            --set vote.image.tag=${{ github.sha }} \
            --set voteUi.image.repository=$ECR_REGISTRY/vote-ui \
            --set voteUi.image.tag=${{ github.sha }} \
            --set result.image.repository=$ECR_REGISTRY/result \
            --set result.image.tag=${{ github.sha }} \
            --set resultUi.image.repository=$ECR_REGISTRY/result-ui \
            --set resultUi.image.tag=${{ github.sha }} \
            --set worker.image.repository=$ECR_REGISTRY/worker \
            --set worker.image.tag=${{ github.sha }}

      - name: Verify deployment
        run: |
          kubectl get pods -n ${{ secrets.K8S_NAMESPACE }}
          kubectl get svc -n ${{ secrets.K8S_NAMESPACE }}
