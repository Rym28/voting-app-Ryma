name: Voting App – Build, Push and Deploy to EKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-west-3
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    name: Build and Push Docker images to ECR
    runs-on: ubuntu-latest

    env:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker images
        run: |
          SERVICES=("vote" "vote-ui" "result" "result-ui" "worker")

          for SERVICE in "${SERVICES[@]}"; do
            IMAGE_URI="${ECR_REGISTRY}/${SERVICE}:${IMAGE_TAG}"
            echo "Building $SERVICE → $IMAGE_URI"
            docker build -t $IMAGE_URI ./$SERVICE
            docker push $IMAGE_URI
          done

      - name: Confirm images pushed
        run: echo "All Voting App images pushed to ${ECR_REGISTRY}"

  deploy-to-eks:
    name: Deploy to Amazon EKS
    needs: build-and-push
    runs-on: ubuntu-latest

    env:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
      K8S_NAMESPACE: ${{ secrets.K8S_NAMESPACE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig for EKS cluster
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Apply Kubernetes manifests
        run: |
          echo "Applying Kubernetes manifests..."
          kubectl apply -f k8s/

      - name: Update deployments with latest images
        run: |
          SERVICES=("vote" "vote-ui" "result" "result-ui" "worker")

          for SERVICE in "${SERVICES[@]}"; do
            echo "Updating $SERVICE deployment..."
            kubectl -n $K8S_NAMESPACE set image deployment/${SERVICE}-deployment \
              ${SERVICE}=${ECR_REGISTRY}/${SERVICE}:${IMAGE_TAG} --record || true
          done

      - name: Verify rollout
        run: |
          echo "Waiting for deployments to complete..."
          for SERVICE in "vote" "vote-ui" "result" "result-ui" "worker"; do
            kubectl -n $K8S_NAMESPACE rollout status deployment/${SERVICE}-deployment --timeout=180s || true
          done

          echo "Current pod status:"
          kubectl -n $K8S_NAMESPACE get pods -o wide
