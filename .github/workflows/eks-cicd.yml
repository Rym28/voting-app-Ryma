name: Voting App ‚Äì Fast CI/CD to AWS EKS (ARM64 + Cache)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  K8S_NAMESPACE: ${{ secrets.K8S_NAMESPACE }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    name: Build and Push ${{ matrix.service }} to ECR (cached)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [vote, vote-ui, result, result-ui, worker]
    outputs:
      ecr_registry: ${{ steps.export-registry.outputs.ecr_registry }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Export ECR registry
        id: export-registry
        run: |
          echo "ecr_registry=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_OUTPUT
          echo "‚úÖ Registry: ${{ steps.login-ecr.outputs.registry }}"

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Restore Docker build cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "${{ matrix.service }}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${{ matrix.service }}" --region "$AWS_REGION"

      - name: Build and Push Image (ARM64)
        env:
          ECR_REGISTRY: ${{ steps.export-registry.outputs.ecr_registry }}
        run: |
          SERVICE=${{ matrix.service }}
          IMAGE="$ECR_REGISTRY/$SERVICE:${IMAGE_TAG}"
          echo "Building $SERVICE ‚Üí $IMAGE"

          if [ "$SERVICE" = "worker" ]; then
            docker buildx build \
              --platform linux/arm64 \
              --cache-from type=local,src=/tmp/.buildx-cache \
              --cache-to type=local,dest=/tmp/.buildx-cache,mode=max \
              -t "$IMAGE" \
              -f "./$SERVICE/src/Dockerfile" "./$SERVICE/src" \
              --push
          else
            docker buildx build \
              --platform linux/arm64 \
              --cache-from type=local,src=/tmp/.buildx-cache \
              --cache-to type=local,dest=/tmp/.buildx-cache,mode=max \
              -t "$IMAGE" "./$SERVICE" \
              --push
          fi

  deploy:
    name: Deploy Voting App to EKS
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Helm upgrade
        env:
          ECR_REGISTRY: ${{ needs.build-and-push.outputs.ecr_registry }}
        run: |
          echo "üß© Using ECR: $ECR_REGISTRY"
          if [ -z "$ECR_REGISTRY" ]; then
            echo "‚ùå ECR_REGISTRY empty ‚Äî check build job output"
            exit 1
          fi

          helm upgrade --install voting ./voting-app \
            --namespace ${{ env.K8S_NAMESPACE }} \
            --create-namespace \
            --set vote.image.repository=$ECR_REGISTRY/vote \
            --set vote.image.tag=${{ env.IMAGE_TAG }} \
            --set voteUi.image.repository=$ECR_REGISTRY/vote-ui \
            --set voteUi.image.tag=${{ env.IMAGE_TAG }} \
            --set result.image.repository=$ECR_REGISTRY/result \
            --set result.image.tag=${{ env.IMAGE_TAG }} \
            --set resultUi.image.repository=$ECR_REGISTRY/result-ui \
            --set resultUi.image.tag=${{ env.IMAGE_TAG }} \
            --set worker.image.repository=$ECR_REGISTRY/worker \
            --set worker.image.tag=${{ env.IMAGE_TAG }}

      - name: Verify
        run: |
          kubectl get pods -n ${{ env.K8S_NAMESPACE }}
          kubectl get svc -n ${{ env.K8S_NAMESPACE }}
